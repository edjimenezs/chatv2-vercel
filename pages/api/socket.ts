import { NextApiRequest, NextApiResponse } from 'next'
import { Server as NetServer } from 'http'
import { Server as SocketIOServer } from 'socket.io'

export const config = {
  api: {
    bodyParser: false,
  },
}

const SocketHandler = (req: NextApiRequest, res: NextApiResponse) => {
  if (!res.socket.server.io) {
    console.log('ğŸš€ Inicializando servidor WebSocket...')
    
    const io = new SocketIOServer(res.socket.server, {
      path: '/api/socket',
      addTrailingSlash: false,
      cors: {
        origin: "*",
        methods: ['GET', 'POST'],
        credentials: true
      },
      transports: ['websocket', 'polling']
    })

    res.socket.server.io = io

    io.on('connection', (socket) => {
      console.log('ğŸ‘¤ Usuario conectado:', socket.id)

      socket.on('user-message', (data: { message: string }) => {
        console.log('ğŸ“¨ Mensaje recibido:', data.message)
        
        setTimeout(() => {
          const botResponse = generateBotResponse(data.message)
          socket.emit('bot-message', { message: botResponse })
          console.log('ğŸ¤– Respuesta enviada:', botResponse)
        }, 1000 + Math.random() * 2000)
      })

      socket.on('disconnect', () => {
        console.log('ğŸ‘‹ Usuario desconectado:', socket.id)
      })
    })
  } else {
    console.log('âœ… WebSocket ya estÃ¡ ejecutÃ¡ndose')
  }
  res.end()
}

function generateBotResponse(userMessage: string): string {
  const message = userMessage.toLowerCase()
  
  const responses = {
    greeting: [
      'Â¡Hola! Â¿CÃ³mo estÃ¡s?',
      'Â¡Saludos! Â¿En quÃ© puedo ayudarte?',
      'Â¡Hola! Me da mucho gusto verte por aquÃ­.'
    ],
    question: [
      'Esa es una excelente pregunta. Â¿PodrÃ­as ser mÃ¡s especÃ­fico?',
      'Interesante pregunta. DÃ©jame pensar en eso...',
      'Me gusta tu curiosidad. Â¿Hay algo mÃ¡s que te gustarÃ­a saber?'
    ],
    help: [
      'Estoy aquÃ­ para ayudarte. Â¿QuÃ© necesitas?',
      'Puedo ayudarte con informaciÃ³n general. Â¿QuÃ© te interesa?',
      'Â¡Por supuesto! Estoy aquÃ­ para asistirte.'
    ],
    goodbye: [
      'Â¡Hasta luego! Fue un placer charlar contigo.',
      'Â¡AdiÃ³s! Que tengas un excelente dÃ­a.',
      'Â¡Nos vemos pronto! CuÃ­date mucho.'
    ],
    websocket: [
      'Â¡Genial! Estamos usando WebSocket para comunicaciÃ³n en tiempo real!',
      'WebSocket permite respuestas instantÃ¡neas. Â¿No es genial?',
      'La conexiÃ³n WebSocket estÃ¡ funcionando perfectamente.'
    ],
    default: [
      'Eso es muy interesante. Â¿PodrÃ­as contarme mÃ¡s?',
      'Entiendo. Â¿Hay algo especÃ­fico en lo que pueda ayudarte?',
      'Gracias por compartir eso conmigo. Â¿QuÃ© mÃ¡s te gustarÃ­a saber?',
      'Me parece fascinante. Â¿Tienes alguna pregunta?'
    ]
  }

  if (message.includes('hola') || message.includes('hi') || message.includes('buenos dÃ­as') || message.includes('buenas tardes') || message.includes('buenas noches')) {
    return responses.greeting[Math.floor(Math.random() * responses.greeting.length)]
  }
  
  if (message.includes('?') || message.includes('quÃ©') || message.includes('cÃ³mo') || message.includes('cuÃ¡ndo') || message.includes('dÃ³nde') || message.includes('por quÃ©')) {
    return responses.question[Math.floor(Math.random() * responses.question.length)]
  }
  
  if (message.includes('ayuda') || message.includes('help') || message.includes('asistencia')) {
    return responses.help[Math.floor(Math.random() * responses.help.length)]
  }
  
  if (message.includes('adiÃ³s') || message.includes('bye') || message.includes('hasta luego') || message.includes('nos vemos')) {
    return responses.goodbye[Math.floor(Math.random() * responses.goodbye.length)]
  }

  if (message.includes('websocket') || message.includes('tiempo real') || message.includes('instantÃ¡neo')) {
    return responses.websocket[Math.floor(Math.random() * responses.websocket.length)]
  }
  
  return responses.default[Math.floor(Math.random() * responses.default.length)]
}

export default SocketHandler
